# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .listener import Listener
from .target import Target


class LoadBalancerV1(pydantic_v1.BaseModel):
    name: str
    created_time: dt.datetime = pydantic_v1.Field(alias="createdTime")
    dns_name: str = pydantic_v1.Field(alias="dnsName")
    security_group_ids: typing.List[str] = pydantic_v1.Field(alias="securityGroupIds")
    vpc_id: str = pydantic_v1.Field(alias="vpcId")
    subnet_ids: typing.List[str] = pydantic_v1.Field(alias="subnetIds")
    hosted_zone_id: typing.Optional[str] = pydantic_v1.Field(alias="hostedZoneId", default=None)
    targets: typing.List[Target]
    listeners: typing.List[Listener]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
